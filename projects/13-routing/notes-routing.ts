/** ğŸ”´ Angular Routing
 * Routing, kullanÄ±cÄ±nÄ±n single-page bir uygulamada gÃ¶rdÃ¼klerini deÄŸiÅŸtirmenize yardÄ±mcÄ± olur.
 * Single-page bir uygulamada, yeni bir sayfa almak iÃ§in sunucuya gitmek yerine, belirli component'lere
 karÅŸÄ±lÄ±k gelen ekran bÃ¶lÃ¼mlerini gÃ¶stererek veya gizleyerek kullanÄ±cÄ±nÄ±n gÃ¶rdÃ¼klerini deÄŸiÅŸtirirsiniz.
 * Angular URL'i izleyerek ve manipÃ¼le ederek farklÄ± URL'ler iÃ§in farklÄ± component'leri render edebilir.
 * 
 * Bir view'dan diÄŸerine gezinmeyi (the navigation) yÃ¶netmek iÃ§in Angular Router'Ä± kullanÄ±rsÄ±nÄ±z.
 * Angular Router, bir tarayÄ±cÄ± URL'ini gÃ¶rÃ¼nÃ¼mÃ¼ deÄŸiÅŸtirme talimatÄ± olarak yorumlayarak gezinmeyi etkinleÅŸtirir.
 */

/** ğŸ”´ Defining a Basic Route
 * Bir route oluÅŸturmanÄ±n Ã¼Ã§ temel yapÄ± taÅŸÄ± vardÄ±r.

    1-) ğŸ”µ Ä°lgili rotalarÄ±nÄ±z iÃ§in bir Routes[] array'i ayarlayÄ±n.

        import { Routes } from '@angular/router';
        export const routes: Routes = [];
    
    2-) ğŸ”µ Ä°lgili rotalarÄ±nÄ±zÄ± Routes[] array'inde tanÄ±mlayÄ±n.

        Bu array'deki her route, iki property iÃ§eren bir JavaScript nesnesidir.
        Ä°lk property olan path, rota iÃ§in URL yolunu tanÄ±mlar.
        Ä°kinci property olan component, Angular'Ä±n karÅŸÄ±lÄ±k gelen yol iÃ§in kullanmasÄ± gereken component'i tanÄ±mlar.
        
        /users â†’ UsersComponent
        /shop â†’ ShopComponent

            const routes: Routes = [
                { path: 'first-component', component: FirstComponent },
                { path: 'second-component', component: SecondComponent },
            ];

    3-) ğŸ”µ TanÄ±mladÄ±ÄŸÄ±nÄ± bu routes[] array'ini app.config.ts'e import edin ve provideRouter() fonksiyonuna ekleyin.

            export const appConfig: ApplicationConfig = {
                providers: [provideRouter(routes)]
            };

    4-) ğŸ”µ Ä°lgili rotalarÄ±nÄ±zÄ± uygulamanÄ±za ekleyin.

        Bunu yapabilmek iÃ§in de AppComponent import[] array'ine RouterLink, RouterLinkActive, ve RouterOutlet'i import edin.
        Daha sonra, component ÅŸablonunuzu <router-outlet> iÃ§erecek ÅŸekilde gÃ¼ncelleyin.

            <h1>Angular Router App</h1>
            <nav>
                <ul>
                    <li>
                        <a routerLink="/first-component" routerLinkActive="active" ariaCurrentWhenActive="page">
                            First Component
                        </a>
                    </li>
                    <li>
                        <a routerLink="/second-component" routerLinkActive="active" ariaCurrentWhenActive="page">
                            Second Component
                        </a>
                    </li>
                </ul>
            </nav>
            <!-- The routed views render in the <router-outlet>-->
            <router-outlet></router-outlet>
 */

/** ğŸ”´ Route Order
 * RotalarÄ±n sÄ±rasÄ± Ã¶nemlidir Ã§Ã¼nkÃ¼ Router rotalarÄ± eÅŸleÅŸtirirken "first-match wins" stratejisini kullanÄ±r.
 * Bu nedenle daha spesifik rotalar daha az spesifik rotalara nazaran listenin daha yukarÄ±sÄ±na yerleÅŸtirilmelidir.
 * Ã–nce statik bir yola sahip rotalarÄ± listeleyin, ardÄ±ndan varsayÄ±lan rotayla eÅŸleÅŸen boÅŸ bir yol rotasÄ± ekleyin.
 * Joker rota en son gelir!
 * Temel bir kural olarak, her zaman en spesifikten en az spesifike doÄŸru sÄ±ralamayÄ± deneyin.
 */

/** ğŸ”´ RouterLink (directive)
 * Angular'da RouterLink, farklÄ± bir rotaya bildirimsel olarak gitmek iÃ§in bir directive'dir.
 * Ä°lgili template'deki bir elemente uygulandÄ±ÄŸÄ±nda, o elementi tanÄ±mlanan rotaya bir gezinme baÅŸlatan 
 bir baÄŸlantÄ± haline getirir.
 * Bir baÄŸlantÄ±da absolute veya relative path'ler kullanabilir, sorgu parametreleri ayarlayabilir,
 parametrelerin nasÄ±l iÅŸleneceÄŸini kontrol edebilir ve gezinme durumlarÄ±nÄ±n geÃ§miÅŸini tutabilirsiniz.

    ğŸ”µ
    /               â†’ router, rotayÄ± uygulamanÄ±n kÃ¶kÃ¼nden arar.
    ./              â†’ router, aktif rotanÄ±n alt segmentlerine bakar.
    ../             â†’ router, rota aÄŸacÄ±nda bir seviye yukarÄ± Ã§Ä±kar.

    ğŸ”µ
    href="", sayfalarda gezinmek iÃ§in HTML tarafÄ±ndan saÄŸlanan ve tÄ±klandÄ±ÄŸÄ±nda sayfayÄ± yeniden yÃ¼kleyen temel attribute'tÃ¼r.
    routerLink="" ise 'sayfayÄ± yeniden yÃ¼klemeden' farklÄ± component'lere gitmek iÃ§in Angular tarafÄ±ndan saÄŸlanan directive'dir.
    Ä°kisi arasÄ±ndaki en bÃ¼yÃ¼k fark, href'in geÃ§erli sayfanÄ±n durumunu Ã¶ldÃ¼rmesi, routerLink'in ise sayfanÄ±n durumunu kaybetmemesidir.
 
    ğŸ”µ
    Bunu tÃ¼m directive'lerde gÃ¶rebilirsiniz:
        KÃ¶ÅŸeli parantez[] kullandÄ±ÄŸÄ±nÄ±zda, bindable property (a variable) geÃ§irdiÄŸiniz anlamÄ±na gelir.
        [routerLink]="routerLinkVariable"
        public routerLinkVariable = "/home";
        updateRouterLinkVariable(){ this.routerLinkVariable = '/about'; }
    KÃ¶ÅŸeli parantezleri[] routerLink iÃ§in kullanmanÄ±n diÄŸer bir sebebi de gezindiÄŸiniz baÄŸlantÄ±ya dinamik sorgu parametreleri geÃ§irebilmenizdir:
        [routerLink]="[routerLinkVariable]"[queryParams]="{unit: dynamicQueryParameter}"
        private dynamicQueryParameter = '129'; public routerLinkVariable = "/home"; 

    ğŸ”µ
    routerLink="/users"
        <your-domain>/users

    routerLink="/users/bob
        <your-domain>/users/bob

    [routerLink]="['/', 'users', 'bob']"
        <your-domain>/users/bob

    [routerLink]="['/', 'users', {details: true}, 'bob']"
    [routerLink]="['/', 'users', {display: 'verbose'}, 'bob']"
        <your-domain>/users;display=verbose/bob

    [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education"
        /user/bob?debug=true#education

    [routerLink]="['/', 'users', { outlets: { side: ['bob'] } }]"
    [routerLink]="['/', 'users', { outlets: { side: ['bob'], footer: ['sharks'] } }]"

    [{ path: 'user/:name', component: UserCmp }]    
        <a routerLink="/user/bob">link to user component</a>

    ['/team', teamId, 'user', userName, {details: true}]
        /team/11/user/bob;details=true
 */