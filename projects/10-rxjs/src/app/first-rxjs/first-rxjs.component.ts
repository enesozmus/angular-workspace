import { Component, DestroyRef, inject, OnInit } from '@angular/core';
import { Observable } from 'rxjs';

@Component({
  selector: 'app-first-rxjs',
  standalone: true,
  imports: [],
  templateUrl: './first-rxjs.component.html',
})
export class FirstRxJSComponent implements OnInit {
  private destroyRef = inject(DestroyRef);
  
  /**
   * ğŸŸ¦
   * ğŸŸ¦ğŸŸ¦
   * ğŸŸ¦ğŸŸ¦ğŸŸ¦
   */
  ngOnInit(): void {
    /**
     *
     */
    /** ğŸ”´ Observable

         â†’ Observable, RxJS'nin temel tÃ¼rÃ¼dÃ¼r (the core type).
         â†’ Observable, gelecekteki deÄŸerlerin (values) veya olaylarÄ±n (events) Ã§aÄŸrÄ±labilir (invokable) bir koleksiyonu fikrini temsil eder.
         â†’ Zaman iÃ§inde ulaÅŸÄ±labilen bir veri akÄ±ÅŸÄ± (stream), verilerini yayabilen (emit) bir veri kaynaÄŸÄ± (data source) olarak dÃ¼ÅŸÃ¼nebilirsiniz.
         â†’ Observable'lar, abone olarak Ã§alÄ±ÅŸtÄ±rabildiÄŸimiz (execute) ve onlara abone olduÄŸumuzda (subscribe) Ã§eÅŸitli zaman noktalarÄ±nda kendi mantÄ±ÄŸÄ±nÄ± Ã§alÄ±ÅŸtÄ±rabilme yeteneÄŸine sahip olarak birden fazla deÄŸer Ã¼retebilen fonksiyonlar gibidirler.
         â†’ Fonksiyonlar ile aralarÄ±ndaki temel fark Ã§eÅŸitli zaman noktalarÄ±nda herhangi bir sayÄ±da ve Ã§eÅŸitte deÄŸer yayabilmeleridir.
      
         â†’ Observable'lar, kendi baÅŸlarÄ±na hiÃ§bir ÅŸey yapmazlar. Ä°lgili Observable'larÄ± yÃ¼rÃ¼tebilmek iÃ§in (execute) Ã¼zerlerinde subscribe() metodunu Ã§aÄŸÄ±rmamÄ±z yani abone olmamÄ±z ve bir iÅŸleyici (handler-object map) saÄŸlamamÄ±z gerekir.
         â†’ Bu ÅŸekilde yaydÄ±klarÄ± deÄŸerlere tepki verebiliriz.

         â†’ Neredeyse her ÅŸeyden bir observable oluÅŸturabilirsiniz, ancak RxJS'deki en yaygÄ±n kullanÄ±m durumu olaylardan (events) oluÅŸur.
            + like an array of values
            + DOM events
            + HTTP requests
            + timers
         
      ğŸŸ¡    
            1. Bir Observable tarafÄ±ndan yayÄ±lan verileri tÃ¼ketebiliriz. (consume).
            2. YayÄ±lan her deÄŸer (emitted value) iÃ§in Ã§alÄ±ÅŸtÄ±rmak istediÄŸimiz bir mantÄ±k (some logic) saÄŸlayabiliriz.
            3. Bir ÅŸeyler ters giderse bir hata iÅŸleme mantÄ±ÄŸÄ± saÄŸlayabiliriz.
            4. Observable tarafÄ±ndan yayÄ±nlanan akÄ±ÅŸÄ±n, veri kÃ¼mesinin bittiÄŸinden sonlandÄ±ÄŸÄ±ndan tÃ¼kendiÄŸinden haberdar olabiliriz.
      */

    /** ğŸ”´ Observable

         class Observable<T> implements Subscribable<T> {
            constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic)
            subscribe(observerOrNext?: Partial<Observer<T>> | ((value: T) => void), error?: (error: any) => void, complete?: () => void): Subscription
            forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void>
            pipe(...operations: OperatorFunction<any, any>[]): Observable<any>
         }
      */

    /** ğŸ”´ Core Observable concerns:

         1. Creating Observables
         2. Subscribing to Observables
         3. Executing Observables
         4. Disposing Observable Executions
      */

    /** ğŸ”´ Creating Observables

         â†’ A new Observable can be created by using the 'new Observable<>()' constructor.
         â†’ The Observable constructor takes one argument: the subscribe function(){} which is run when we subscribe to this Observable.
         â†’ The subscribe function(){} is the most important piece to describe the Observable.
         
            constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic)
    
      ğŸ”µ The subscribe function

         â†’ Ä°lgili Observable execute edilmek, tÃ¼ketilmek, dinlenilmek istendiÄŸinde kendisine abone olunmasÄ± gerekir.
         â†’ SÃ¶z konusu amaÃ§lar doÄŸrultusunda ilgili Observable'a abone olunduÄŸunda Ã§aÄŸrÄ±lan fonksiyondur. ğŸ”µ
            â†’ Bu fonksiyona bir 'Subscriber' verilir.
               1. Bu Subscriber'a yayabilmesi iÃ§in next() fonksiyonu ile yeni deÄŸerler atanabilir.
               2. Bu Subscriber'a bir hata durumu oluÅŸturabilmesi iÃ§in error() fonksiyonu atanabilir.
               3. Bu Subscriber'a ilgili Observable tarafÄ±ndan yayÄ±nlanan akÄ±ÅŸÄ±n, veri kÃ¼mesinin bittiÄŸinden sonlandÄ±ÄŸÄ±ndan tÃ¼kendiÄŸinden haberdar edebilmesi (baÅŸarÄ±lÄ± bir tamamlamayÄ± bildirmek) iÃ§in complete() fonksiyonu atanabilir. 
      */
    const demo1$ = new Observable<string>();
    const demo2$ = new Observable<string>(function subscribe(subscriber) {});
    // ğŸŸ¢ The demo3$ that pushes the values (Alice, Ben, David, Jane) immediately synchronously when subscribed.
    const demo3$ = new Observable<string>((subscriber) => {
      // subscriber.next(1);
      subscriber.next('Alice'); // â†’ A value has been pushed to the consumer to be observed.
      subscriber.next('Ben');
      subscriber.next('David');
      subscriber.next('Jane');
      // ğŸ”ºğŸ”» subscriber.error('My Custom Error'); // â†’ The producer has encountered a problem and is notifying the consumer.
      setTimeout(() => {
        subscriber.next('Max'); // happens asynchronously
        subscriber.complete(); // â†’ The producer is notifying the consumer that it is done nexting values, without error, will send no more values, and it will finalize.
      }, 4000);
    });
    /**  ğŸŸ¥ Subscriber
       * ğŸŸ¥ğŸŸ¥ğŸŸ¥
       * ğŸŸ¥ğŸŸ¥
       * ğŸŸ¥
       * Implements 'the Observer interface' and extends 'the Subscription class'.
       * While the Observer is the public API for consuming the values of an Observable, all Observers get converted to a Subscriber, in order to provide Subscription-like capabilities such as unsubscribe.

            class Subscriber<T> extends Subscription implements Observer<T> {
            ...
            ...
            ...
            }

      + Observer, bir Observable'Ä±n deÄŸerlerini tÃ¼ketmek iÃ§in genel API iken,
      + ...tÃ¼m Observer'lar, abonelikten Ã§Ä±kma gibi Abonelik benzeri yetenekler saÄŸlamak iÃ§in bir Subscriber'a dÃ¶nÃ¼ÅŸtÃ¼rÃ¼lÃ¼r.
      + YukarÄ±daki next(), error() ve complete() fonksiyonlarÄ± Observer interface'i Ã¼zerinden gelirken; unsubscribe(), add() ve remove() gibi fonksiyonlar Subscription class'Ä± Ã¼zerinden gelir.
      */

    /**  ğŸŸ¥ Observer
       * ğŸŸ¥ğŸŸ¥ğŸŸ¥
       * ğŸŸ¥ğŸŸ¥
       * ğŸŸ¥
       * 'An object interface' that defines 'a set of callback functions' a user can use to get notified of any set of Observable notification events.
       * An Observer is a consumer of values delivered by an Observable.
       * Observers are just objects with three callbacks, one for each type of notification that an Observable may deliver.
       * Observers are simply a set of callbacks, one for each type of notification delivered by the Observable: next(), error(), and complete(). 
       
      * Observer interface'i hem Subscriber class'Ä±nÄ±n uyguladÄ±ÄŸÄ± (implement) bir interface hem de Observable class'Ä±nÄ±n subscribe() fonksiyonunun kabul ettiÄŸi argÃ¼manÄ±n partial dÃ¼zeyinde bir nesne arayÃ¼zÃ¼dÃ¼r.

            interface Observer<T> {
               next: (value: T) => void
               error: (err: any) => void
               complete: () => void
            }

      ğŸŸ¡ AÅŸaÄŸÄ±da tipik bir Observer nesnesinin (object) bir Ã¶rneÄŸi gÃ¶sterilmektedir

            const observer: Observer<any> = {
               next: (x: any) => console.log('Observer got a next value: ' + x),
               error: (err: any) => console.error('Observer got an error: ' + err),
               complete: () => console.log('Observer got a complete notification'),
            };

         ğŸ”µ The Partial Observer
            â†’ Observers in RxJS may also be partial.
            â†’ The Observer object can also be partial and doesnâ€™t require all three callbacks.
            â†’ If you don't provide one of the callbacks, the execution of the Observable will still happen normally.
         
               const observer = {
                  next: x => console.log('Observer got a next value: ' + x),
                  error: err => console.error('Observer got an error: ' + err),
               };

      ğŸŸ¡ Observer nesnesini kullanmak iÃ§in, bunu bir Observable abonesine saÄŸlayÄ±n:

      * To use the Observer, provide it to the subscribe of an Observable:

            observable$.subscribe(observer);

      * When subscribing to an Observable, you may also just provide the next callback as an argument, without being attached to an Observer object,
      * for instance like this:

            observable$.subscribe(x => console.log('Observer got a next value: ' + x));
      */

    /**  ğŸŸ¥ Subscription
       * ğŸŸ¥ğŸŸ¥ğŸŸ¥
       * ğŸŸ¥ğŸŸ¥
       * ğŸŸ¥
       * A Subscription is an object that represents a disposable resource, usually the execution of an Observable.
       * A Subscription has one important method, unsubscribe, that takes no argument and just disposes the resource held by the subscription.
       * Subscriptions can also be put together, so that a call to an unsubscribe() of one Subscription may unsubscribe multiple Subscriptions.
       * Subscriptions also have a remove(anotherSubscription) method, in order to undo the addition of a child Subscription.

            subscription.unsubscribe();
            subscription.add(anotherSubscription);
            subscription.remove(anotherSubscription);

            class Subscription implements SubscriptionLike {
               static EMPTY: (() => {...})
               constructor(initialTeardown?: () => void)
               closed: false

               unsubscribe(): void
               add(teardown: TeardownLogic): void
               remove(teardown: Subscription | Unsubscribable | (() => void)): void
            }
      */

    //const subscription = demo3$.subscribe();
    const subscription = demo3$.subscribe({
      // on successful emissions
      next: (name) => console.log(name),
      // on errors
      error: (error) => console.log(error),
      // called once on completion
      complete: () => console.log('complete!'),
    });

    const subscription2 = demo3$.subscribe((name) => console.log(name + ' â†’ 2'));

    // Just call unsubscribe() to cancel the execution.
    this.destroyRef.onDestroy(() => {
      subscription.unsubscribe();
      subscription2.unsubscribe();
    });
  }
}
