import {
  AfterViewInit,
  Component,
  ElementRef,
  EventEmitter,
  OnInit,
  Output,
  viewChild,
  ViewChild,
  ViewChildren,
} from '@angular/core';

@Component({
  selector: 'app-new-ticket',
  templateUrl: './new-ticket.component.html',
  styleUrl: './new-ticket.component.css',
})
// export class NewTicketComponent implements OnInit, AfterViewInit {
export class NewTicketComponent {
  // add = output<{ title: string; text: string }>();
  @Output() add = new EventEmitter<{ title: string; text: string }>();
  enteredTitle = '';
  enteredText = '';

  onSubmit() {
    this.add.emit({ title: this.enteredTitle, text: this.enteredText });
    // this.form?.nativeElement.reset();
    this.enteredTitle = '';
    this.enteredText = '';
  }

  /**
   * Ä°lgili component'in tÃ¼m @Input'larÄ± initialize edildikten sonra bir kez Ã§alÄ±ÅŸÄ±r.
   * Bu adÄ±m, ÅŸablon baÅŸlatÄ±lmadan Ã¶nce gerÃ§ekleÅŸir.
   */
  // ngOnInit(): void {
  //   console.log('AFTER ngOnInit');
  //   console.log('âš«');
  //   console.log(this.formElement?.nativeElement); // â†’ undefined
  //   console.log('âš«');
  // }

  /**
   * Ä°lgili component'in view'Ä± initialize edildikten sonra bir kez Ã§alÄ±ÅŸÄ±r.
   * Åžablon tarafÄ±ndaki Ã¶geler ulaÅŸÄ±labilir/tanÄ±mlÄ± hale gelir.
   */
  // ngAfterViewInit(): void {
  //   console.log('AFTER VIEW INIT');
  //   console.log('ðŸŸ§');
  //   console.log(this.formElement?.nativeElement);
  //   console.log('ðŸŸ§');
  // }

  // ðŸŸ¡ Handling Form Submission
  // onSubmit(titleInputElement: HTMLInputElement) {
  //   console.log('Hi form');
  //   console.log(titleInputElement);
  //   ðŸŸ¡ JavaScript Object
  //   console.dir(titleInputElement);

  //   const enteredTitle = titleInputElement.value;
  //   console.log(enteredTitle);
  // }

  // ðŸŸ¡ Getting Access to Template Elements via ViewChild
  // @ViewChild('ourForm', { static: false }) private formElement?: ElementRef<HTMLFormElement>;
  // ðŸ”º Multiple ðŸ”º â†’ @ViewChildren(ButtonComponent) buttons

  // ðŸŸ¡ Angular 17
  // private formElement2 = viewChild<ElementRef<HTMLFormElement>>('ourForm');
  // private formElement2 = viewChild.required<ElementRef<HTMLFormElement>>('ourForm');

  onSubmit2(title: string, ticketText: string, formElement: HTMLFormElement) {
    // console.log('ðŸŸ§ðŸŸ§ðŸŸ§onSubmit2');
    // console.log(title);
    // console.log(ticketText);
    // console.log(formElement);

    // formElement.reset();
    // this.formElement?.nativeElement.reset();
    // this.formElement2()?.nativeElement.reset();
    // this.formElement2().nativeElement.reset();
  }
}
