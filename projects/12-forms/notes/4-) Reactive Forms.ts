/** ğŸ”´ Building a Reactive Form
 * Reactive formlar, deÄŸerleri zamanla deÄŸiÅŸen form girdilerini iÅŸlemek iÃ§in model-driven bir yaklaÅŸÄ±m saÄŸlar.
 * Reactive formlar, belirli bir zaman noktasÄ±nda bir formun durumunu yÃ¶netmek iÃ§in explicit ve immutable bir yaklaÅŸÄ±m kullanÄ±r.
 * Form durumundaki her deÄŸiÅŸiklik, deÄŸiÅŸiklikler arasÄ±nda modelin bÃ¼tÃ¼nlÃ¼ÄŸÃ¼nÃ¼ koruyan yeni bir durum dÃ¶ndÃ¼rÃ¼r.
 * Reactive formlar, form girdilerinin ve deÄŸerlerinin eÅŸ-zamanlÄ± olarak eriÅŸilebilen girdi deÄŸerleri akÄ±ÅŸlarÄ± olarak saÄŸlandÄ±ÄŸÄ±
 Observable Stream'lar etrafÄ±nda oluÅŸturulur.
 * Reactive formlar, veri modeline eÅŸ-zamanlÄ± eriÅŸim, observable operatÃ¶rlerle immutability ve Observable Stream'lar aracÄ±lÄ±ÄŸÄ±yla
 deÄŸiÅŸiklik izleme saÄŸlar.
 
 *
 * ğŸ”µ To use reactive form controls, import 'ReactiveFormsModule'.
 * ğŸ”µ Generate a new component with a FormControl('').
 * ğŸ”µ Register the control in the template
 
    import {Component} from '@angular/core';
    import {FormControl} from '@angular/forms';

    @Component({
        selector: 'app-name-editor',
        templateUrl: './name-editor.component.html',
        styleUrls: ['./name-editor.component.css'],
        standalone: false,
        })
    export class NameEditorComponent {
        name = new FormControl('');
        * FormControl'Ã¼n constructor'Ä±nÄ± kullanarak initial â€‹â€‹deÄŸerini ayarlayÄ±n, bu durumda bu boÅŸ bir string'dir.
        * Component class'Ä±nÄ±zda bu control'leri oluÅŸturarak, form giriÅŸinin durumunu dinlemek, gÃ¼ncellemek ve
        doÄŸrulamak iÃ§in anÄ±nda eriÅŸim elde edersiniz.
        * Component class'Ä±nÄ±zda bu control'Ã¼ oluÅŸturduktan sonra, bunu ÅŸablondaki bir form control element'iyle iliÅŸkilendirmelisiniz
        ...
    }

    <label for="name">Name: </label>
    <input id="name" type="text" [formControl]="name">

 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
*/