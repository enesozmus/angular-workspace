/** ğŸ”´ FormsModule
 * FormlarÄ±n yÃ¶netimini Angular'Ä±n almasÄ±na olanak saÄŸlar.
 * Template-driven formlar iÃ§in gerekli provider'larÄ± ve directive'leri export eder ve bunlarÄ± bu modÃ¼lÃ¼
 import eden NgModules tarafÄ±ndan iÃ§e aktarÄ±lmaya hazÄ±r hale getirir.
 */

/** ğŸ”´ Form
 * FormGroupDirective ve NgForm directive'leri tarafÄ±ndan uygulanan (implemented by) bir interface'dir.
 * FormsModule ve ReactiveFormsModule tarafÄ±ndan kullanÄ±lÄ±r.
 */

/** ğŸ”´ NgForm
 * Ãœst dÃ¼zey bir FormGroup instance'Ä± oluÅŸturur ve bunu ilgili bÃ¼tÃ¼n form deÄŸerlerini ve doÄŸrulama durumlarÄ±nÄ±
 izleyebilmek iÃ§in bir forma baÄŸlar.
 * FormsModule'u import ettiÄŸiniz anda, bu directive tÃ¼m <form> tag'lerinde varsayÄ±lan olarak etkin hale gelir.
 * Ä°steÄŸe baÄŸlÄ± olarak ngForm directive'ini 'ngForm' kullanarak yerel bir ÅŸablon deÄŸiÅŸkenine aktarabilirsiniz.
 * Bu sayede ilgili formun Angular tarafÄ±ndan oluÅŸturulan JavaScript nesnesine ulaÅŸabilirsiniz.

    <form (ngSubmit)="onSubmit(myForm)" #myForm="ngForm">
 */

/** ğŸ”´ FormControl
 * FormControl, FormGroup, FormArray ve FormRecord ile birlikte Angular'da formlarÄ± tanÄ±mlamak iÃ§in kullanÄ±lan
 dÃ¶rt temel yapÄ± taÅŸÄ±ndan biridir.
 * FormControl, ilgili Angular formundaki tek bir input field'Ä±nÄ± temsil eder.

   <input type="text" id="name" name="name"/>

   let name = new FormControl('');

 * Bir developer olarak, metin kutusundaki mevcut deÄŸeri bilmek istersiniz.
 * AyrÄ±ca ilgili deÄŸerin geÃ§erli olup olmadÄ±ÄŸÄ±nÄ± da bilmek istersiniz.
 * AyrÄ±ca ilgili deÄŸerin kullanÄ±cÄ± tarafÄ±ndan deÄŸiÅŸtirilip (dirty) deÄŸiÅŸtirilmediÄŸini (unchanged) de bilmek isteyebilirsiniz.
 * FormControl, ilgili input element'lerinin iÃ§in tÃ¼m bu bilgileri kapsayan bir nesnedir.
 * Her input field'Ä± iÃ§in bu class'Ä±n ayrÄ± bir instance'Ä± oluÅŸturulur.
 * Bu instance'lar ilgili field'Ä±n mevcut deÄŸerini ve touched, untouched, dirty, pristine, valid, invalid olup olmadÄ±klarÄ±nÄ±n bilgisini saÄŸlarlar.
 */

/** ğŸ”´ FormGroup
 * FormGroup, FormControl, FormArray ve FormRecord ile birlikte Angular'da formlarÄ± tanÄ±mlamak iÃ§in kullanÄ±lan
 dÃ¶rt temel yapÄ± taÅŸÄ±ndan biridir.
 * Bir form birden fazla input field'Ä±na dolayÄ±sÄ±yla da 'control' grubuna sahip olabilir.
 * FormGroup, 'FormControl' class'Ä±nÄ±n bir koleksiyonudur. 
 * FormGroup class'Ä± bir 'control' grubunu temsil eder; FormControl instance'larÄ±nÄ±n deÄŸerini ve geÃ§erlilik durumunu izler.
 
   <input type="text" id="name" name="name"/>
   <input type="text" id="country" name="country" >
   <input type="text" id="city" name="city" >

   let address= new FormGroup({
      name : new FormControl(""),
      country : new FormControl(""),
      city : new FormControl(""),
   })
 */

/** ğŸ”´ FormArray
 * FormArray, FormControl, FormGroup ve FormRecord ile birlikte Angular'da formlarÄ± tanÄ±mlamak iÃ§in kullanÄ±lan
 dÃ¶rt temel yapÄ± taÅŸÄ±ndan biridir.
 * FormArray, FormControl'lerinin bir array'idir[].
 * FormGroup'ta her FormControl, anahtar olarak control adÄ± olan bir property'dir. 
 * FormArray'de ise FormControl'lerinin bir array'i vardÄ±r.
 * AyrÄ±ca FormControl'leri run-time'da dinamik olarak eklememize olanak tanÄ±r.
 
   contactForm = new FormGroup( {
      name: new FormControl(''),
      country : new FormControl(""),
      cities:new FormArray([
         new FormControl('Mumbai'),
         new FormControl('Delhi')
      ])
   });.
 */

/** ğŸ”´ FormRecord
 * FormRecord da FormControl'Ã¼n bir koleksiyonudur.
 * FormGroup'a Ã§ok benzerdir, ancak FormControl'leri run-time'da dinamik olarak eklememize olanak tanÄ±r.
 * FormRecord'da control'ler FormRecord'un bir property'si haline gelir.
 Her bir control key-value Ã§ifti olarak temsil edilirken, FormArray'de control'ler bir array'in parÃ§asÄ± haline gelir.

   cities!: FormRecord<FormControl<string | null>>;
   this.cities.addControl('mumbai', new FormControl(''));
 */
