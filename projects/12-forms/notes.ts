/** ğŸ”´ Forms in Angular
 * Formlarla kullanÄ±cÄ± girdisini iÅŸlemek, birÃ§ok yaygÄ±n uygulamanÄ±n temel taÅŸÄ±dÄ±r.
 * Uygulamalar, kullanÄ±cÄ±larÄ±n oturum aÃ§masÄ±nÄ±, bir profili gÃ¼ncellemesini, hassas bilgileri girmesini
 * ...ve diÄŸer birÃ§ok veri giriÅŸi gÃ¶revini gerÃ§ekleÅŸtirmesini saÄŸlamak iÃ§in formlarÄ± kullanÄ±r.
 * Angular, formlar aracÄ±lÄ±ÄŸÄ±yla kullanÄ±cÄ± girdisini iÅŸlemek iÃ§in iki farklÄ± yaklaÅŸÄ±m sunar: reactive ve template-driven.
 * Her ikisi de view'dan kullanÄ±cÄ± girdi olaylarÄ±nÄ± yakalar, kullanÄ±cÄ± girdisini doÄŸrular, gÃ¼ncellenecek bir form modeli
 * ...ve veri modeli oluÅŸturur ve deÄŸiÅŸiklikleri izlemek iÃ§in bir yol saÄŸlar.
 */

/** ğŸ”´ Choosing an approach â†’ reactive & template-driven
 * Reactive formlar ve template-driven formlar form verilerini farklÄ± ÅŸekilde iÅŸler ve yÃ¶netir.
 * Her yaklaÅŸÄ±m farklÄ± avantajlar sunar.
 */

/** ğŸŸ£ Reactive forms
 * Ä°lgili formun nesne modeline doÄŸrudan, aÃ§Ä±k (explicit) eriÅŸim saÄŸlamanÄ±za olanak saÄŸlar.
 * Template-driven formlarla karÅŸÄ±laÅŸtÄ±rÄ±ldÄ±ÄŸÄ±nda, daha saÄŸlamdÄ±rlar: daha Ã¶lÃ§eklenebilir,
 * ...yeniden kullanÄ±labilir ve test edilebilirdirler.
 * Formlar uygulamanÄ±zÄ±n Ã¶nemli bir parÃ§asÄ±ysa veya uygulamanÄ±zÄ± oluÅŸturmak iÃ§in reactive kalÄ±plar kullanÄ±yorsanÄ±z, reactive formlarÄ± kullanÄ±n.

    . Form modelinin kurulumu explicit'tir ve component class'larÄ±nda oluÅŸturulur.
    . Veri modeli structured ve immutable'dÄ±r.
    . Veri akÄ±ÅŸÄ± eÅŸ-zamanlÄ±dÄ±r.
    . Form doÄŸrulamasÄ± fonksiyonlar tarafÄ±ndan saÄŸlanÄ±r.
 */

/** ğŸ”µ Template-driven forms
 * Ä°lgili formun nesne modelini oluÅŸturmak ve dÃ¼zenlemek iÃ§in ÅŸablondaki directive'lere gÃ¼venmeniz gerekir.
 * Bir uygulamaya e-posta listesi, kayÄ±t formu gibi basit bir form eklemek iÃ§in kullanÄ±ÅŸlÄ±dÄ±rlar.
 * Bir uygulamaya eklemek kolaydÄ±r, ancak reactive formlar kadar iyi Ã¶lÃ§eklenmezler.
 * YalnÄ±zca HTML template'inde yÃ¶netilebilen Ã§ok temel form gereksinimleriniz ve mantÄ±ÄŸÄ±nÄ±z varsa, template-driven formlar iyi uyum saÄŸlayabilir.
 
    . Form modelinin kurulumu implicit'tir ve directive'ler tarafÄ±ndan oluÅŸturulur.
    . Veri modeli unstructured ve mutable'dÄ±r.
    . Veri akÄ±ÅŸÄ± eÅŸ-zamansÄ±zdÄ±r.
    . Form doÄŸrulamasÄ± directive'ler tarafÄ±ndan saÄŸlanÄ±r.
 */

/** ğŸ”´ Scalability
 * Formlar uygulamanÄ±zÄ±n merkezi bir parÃ§asÄ±ysa, Ã¶lÃ§eklenebilirlik Ã§ok Ã¶nemlidir.
 * Form modellerini ilgili component'ler arasÄ±nda 'yeniden kullanabilmek' kritik Ã¶neme sahiptir.
 * Reactive formlar, template-driven formlardan daha Ã¶lÃ§eklenebilirdir.
 * Reactive formlar, altta yatan form API'Ä±na doÄŸrudan eriÅŸim saÄŸlarlar ve view ile veri modeli arasÄ±nda
 * ...eÅŸ-zamanlÄ± veri akÄ±ÅŸÄ± kullanÄ±rlar, bu da bÃ¼yÃ¼k Ã¶lÃ§ekli formlar oluÅŸturmayÄ± kolaylaÅŸtÄ±rÄ±r.
 * Template-driven formlar basit senaryolara odaklanÄ±r ve yeniden kullanÄ±labilir deÄŸildir.
 */

/** ğŸ”´ Setting up the form model
 * Hem reactive hem de template-driven formlar, kullanÄ±cÄ±larÄ±n etkileÅŸimde bulunduÄŸu form giriÅŸ Ã¶ÄŸeleri
 * ...ile component modelinizdeki form verileri arasÄ±ndaki deÄŸer deÄŸiÅŸikliklerini izler.
 * Bu iki yaklaÅŸÄ±m, temel yapÄ± taÅŸlarÄ±nÄ± paylaÅŸÄ±rlar ancak ortak form-control instance'larÄ±nÄ± oluÅŸturma
 * ...ve yÃ¶netme ÅŸeklinizde farklÄ±lÄ±k gÃ¶sterir.

 * Hem reactive hem de template-driven formlar aÅŸaÄŸÄ±daki temel class'lar Ã¼zerine kuruludur:

    . FormControl â†’ Tekil form denetiminin deÄŸerini ve doÄŸrulama durumunu izler.
    . FormGroup   â†’ Bir form denetimleri koleksiyonu iÃ§in aynÄ± deÄŸerleri ve durumu izler.
    . FormArray   â†’ Bir dizi form denetimi iÃ§in aynÄ± deÄŸerleri ve durumu izler.
    . ControlValueAccessor â†’ Angular FormControl instance'larÄ± ile built-in DOM element'leri arasÄ±nda bir kÃ¶prÃ¼ oluÅŸturur.
 */

/** ğŸŸ£ Setup in reactive forms
 * Reactive formlarda, form modelini doÄŸrudan component class'Ä±nda tanÄ±mlarsÄ±nÄ±z.
 * [formControl] directive'i, dahili bir deÄŸer eriÅŸimcisi kullanarak,
 * ...aÃ§Ä±kÃ§a oluÅŸturulan FormControl instance'Ä±nÄ± view'daki belirli bir form elementine baÄŸlar.
 
    @Component({
        selector: 'app-reactive-favorite-color',
        template: `
            Favorite Color: <input type="text" [formControl]="favoriteColorControl">
        `,
        standalone: false,
    })
    export class FavoriteColorComponent {
        favoriteColorControl = new FormControl('');
    }
 */

/** ğŸ”µ Setup in template-driven forms
 * Template-driven formlarda, form modeli aÃ§Ä±k (explicit) olmaktan ziyade Ã¶rtÃ¼ktÃ¼r (implicit).
 * NgModel directive'i, belirli bir form elementi iÃ§in bir FormControl instance'Ä± oluÅŸturur ve yÃ¶netir.
 
    @Component({
        selector: 'app-template-favorite-color',
        template: `
            Favorite Color: <input type="text" [(ngModel)]="favoriteColor">
        `,
        standalone: false,
    })
    export class FavoriteColorComponent {
        favoriteColor = '';
    }
 */
