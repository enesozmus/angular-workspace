import {
  Component,
  ElementRef,
  EventEmitter,
  Output,
  ViewChild,
} from '@angular/core';

@Component({
  selector: 'app-cockpit',
  templateUrl: './cockpit.component.html',
  styleUrl: './cockpit.component.css',
})
export class CockpitComponent {
  @Output() serverCreated = new EventEmitter<{
    name: string;
    content: string;
  }>();
  @Output() blueprintCreated = new EventEmitter<{
    name: string;
    content: string;
  }>();

  newName = '';
  newContent = '';

  onAddServer() {
    this.serverCreated.emit({
      name: this.newName,
      content: this.newContent,
    });
  }

  onAddBlueprint() {
    this.blueprintCreated.emit({
      name: this.newName,
      content: this.newContent,
    });
  }

  // ğŸŸ¦ Declaring a Template Reference Variable
  onAddServer2(test: HTMLInputElement) {
    console.log(test.value);
    console.log('ğŸŸ¥');
    console.log(this.newName2);
    console.log(this.newName2.nativeElement);
    console.log(this.newName2.nativeElement.value);
  }

  // ğŸŸ¦ Getting Access to the Template & DOM with @ViewChild
  @ViewChild('newName2', { static: true }) newName2: ElementRef | any;
}
/*
  ğŸŸ¦
  ğŸŸ¦ğŸŸ¦ â†’ Assigning an Alias to Input Properties

    @Input({ required: true, alias:'falanca' })
*/

/*
  ğŸŸ¦
  ğŸŸ¦ğŸŸ¦ @ViewChild
  
    â†’ BildiÄŸimiz gibi, Angular'da dÃ¼z HTML Ã¶ÄŸelerini diÄŸer Angular bileÅŸenleriyle birleÅŸtirerek bir bileÅŸen ÅŸablonu tanÄ±mlarÄ±z.

    â†’ Ã‡oÄŸu zaman, ilgili .ts sÄ±nÄ±fÄ±nÄ± kullanmadan sadece ÅŸablon referanslarÄ±nÄ± kullanarak birden fazla bileÅŸeni ve HTML elementini doÄŸrudan ÅŸablonda koordine edebiliriz. Ancak durum her zaman bÃ¶yle deÄŸildir!

    â†’ Bazen ilgili elementlere veya bileÅŸene .ts class'Ä±ndan eriÅŸmemiz gerekir.

  ğŸŸ¦
  ğŸŸ¦ğŸŸ¦ ElementRef

    â†’ A wrapper around a native element inside of a View.


  ğŸŸ¦
  ğŸŸ¦ğŸŸ¦ @ContentChild

    â†’ Yeniden kullanÄ±labilir bileÅŸenler oluÅŸturmada bize en Ã§ok yardÄ±mcÄ± olan Angular Ã¶zelliklerinden biri Content Projection ve ng-content'tir.

    Projected content â†’  ilgili bileÅŸenin bir Ã¼st bileÅŸenden aldÄ±ÄŸÄ± iÃ§eriktir.

    â†’ ContentChild ve ContentChildren, DOM'daki YansÄ±tÄ±lan Ä°Ã§eriÄŸe yÃ¶nelik baÅŸvuruyu sorgulamak ve almak iÃ§in kullandÄ±ÄŸÄ±mÄ±z dekoratÃ¶rlerdir.

    â†’ ContentChild ve ContentChildren, ViewChild ve ViewChildren'a Ã§ok benzer. BileÅŸendeki herhangi bir DOM Ã¶ÄŸesinin baÅŸvurusunu sorgulamak ve almak iÃ§in ViewChild veya ViewChildren'Ä± kullanÄ±rÄ±z. DOM Ã¶ÄŸesi bir HTML Ã¶ÄŸesi, Alt BileÅŸen veya yÃ¶nerge vb. olabilir. Ancak, Ä°Ã§erik projeksiyonu kullanÄ±larak eklenen ÅŸablona yÃ¶nelik baÅŸvuruyu almak iÃ§in ViewChild veya ViewChildren'Ä± kullanamayÄ±z.

    @ContentChild('contentParagraph', {static: true}) paragraph: ElementRef;

    ngOnInit() {
      console.log('ngOnInit called!');
      console.log('Text Content of paragraph: ' + this.paragraph.nativeElement.textContent);
    }

    ngDoCheck() {
      console.log('ngDoCheck called!');
    }

    ngAfterContentInit() {
      console.log('ngAfterContentInit called!');
      console.log('Text Content of paragraph: ' + this.paragraph.nativeElement.textContent);
    }

    <ng-content></ng-content> /// â†’ bunun olduÄŸu tarafta kullanÄ±lÄ±r.

    <p #contentParagraph>
        <strong *ngIf="serverElement.type === 'server'" style="color: red">
            {{serverElement.content}}
        </strong>
        <em *ngIf="serverElement.type === 'blueprint'" style="color: blue">
            {{serverElement.content}}
        </em>
    </p>
*/